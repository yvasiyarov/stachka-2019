Два очень разных опыта миграции на Go 
На примере компаний Lazada и Ozon.Travel
26 Apr 2019
Tags: meetup, go, C#, legacy, php

Васияров Юрий
CTO, Ozon.Travel
yvasiyarov@ozon.travel

* Слайды
Для вашего удобства слайды доступны на github
[[https://github.com/yvasiyarov/stachka-2019][https://github.com/yvasiyarov/stachka-2019]]

* 2014-2018 Руководил разработкой платформы в Lazada
- крупнейший интернет магазин в Юго-Восточной Азии
- Команда разработки: более 650 инженеров, из них 120 человек - команда платформы
- 4 датацентра, более 2000 серверов
- до 100k RPS на бэкэнды (декабрь 2017)
.image lazada_map.png 350 _

* 2018-настоящее время, CTO Ozon.Travel
- самый популярный продавец авиа/жд билетов в России (Данные Wordstat и Euromonitor)
- надежный (9 лет на рынке, где каждые полгода кто-то банкротится)
- Нагрузка не как в Lazada, но тоже заставляет думать, прежде чем выкладывать в продакшен 
.image ozon_travel.png 350 _

* Lazada: Переход с PHP на Go
.image lazada_catalog.png 500 _

: Если в качестве инструмента для разработки API/системных утилит  Golang себя давно зарекомендовал
: то с фронтенд компонентами дело обстоит иначе. Скажем так - выбор Golang для разработки витрины является не очевидным решением.
: Но мы попробовали и прямо сказать - результатом остались очень довольны 

* Особенности решаемой задачи
- Самая высоконагруженная часть сайта (до 70K RPS)
- Большое потребление аппаратных ресурсов(80 DELL серверов)
- Быстрый рост нагрузки (120% в год)

* Переход с PHP на Go: Результаты
.image 20.png 300 _

* Типичные ошибки ex-PHP программистов
.image php_to_golang.png  

* map[] != Array()
- map[] - это честный hash table 
- Является неупорядоченным 
.image shoked.png 400 _

* Что нужно знать о database/sql
- Когда создается подключение ?
- Когда оно закрывается ?
- Cколько вообще  подключений ?
- Есть ли ограничение на максимальное количество соединений ?
- Что случится, если в пуле не будет свободных соединений ?
- Что если SQL сервер закроет соединение ?

* Ошибка при работе с транзакциями
.code transaction.go 

* Утечка соединений
.code conn_leak.go

* Однажды ночью на проде
.image bum.png 550 _

* Какие еще ошибки мы любим повторять ?
- Используем Prepared statement только однажды
- Используем db.Query() не для чтения
- Полагаться на MySQL сессию вне транзакции
.image db_guide.png 300 _  

* Переход с C# на Go: Ozon.Travel
.image ozon-travel.jpg 600 _

* Как работает OTA ?
.image ota_workflow.png

* Особенности решаемой задачи
- Большое время ответа API GDS/Авиакомпаний/Страховых компаний (от 3 до 30 секунд)
- Часто бывают недоступны/перегружены запросами (timeout) 
- Всех нужно опрашивать параллельно

: * Параллелизм в C#, какие есть варианты? 
: - Thread
: - ThreadPool (ThreadPool.QueueUserWorkItem() и тд)
: - Threading.Tasks
: Thread - OS-level thread, with its own stack and kernel resources. Требуют много ресурсов, переключение контекста между нитями, сложно управлять
: ThreadPool gives you no control at all; you can submit work to execute at some point, and you can control the size of the pool, but you can’t set anything else. You can’t even tell when the pool will start running the work you submit to it. No way to get the result!!
: Complexity. Memory footprint.
: И так перейдем к задаче. как правило в виде "дано" выступает монолитное приложение. Давайте сравним PHP монолиты и C# монолиты

* C#: Threading.Tasks это легко
.image navigation-trace-async-program.png 
: TODO: Task memory footprint 

* Как работает ThreadPool
.image threadpool.png

: //ThreadPool has per-appdomain managed queue of work-items. The VM is
: //responsible for just scheduling threads into appdomains. After that
: //work-items are dispatched from the managed queue.
: work quantum is 30ms


* Параллелизм с помощью Threading.Tasks это 
- Требует много памяти(примерно 212kb на таск)
- Если при выполнении таска случаются исключение - требуется еще больше памяти
- Дорогое переключение контекста(индентификационные данные Windows, thread local data и тд) 
.image terabyte_of_memory.jpg 270 _
[[https://github.com/Microsoft/referencesource/blob/master/mscorlib/system/threading/threadpool.cs]]

: Память измерял по PrivateMemorySize
: Контекст включает в себя:
:    Сжатый стэк (Thread.Principal)
:    Идентификационные данные Windows
:    Контекстные данные логического вызова(LogicalSetData/LogicalGetData)

* Параллелизм в Golang 
- goroutines
- channels
.image gophermegaphones.480.jpg

* Планировщик в Golang
- G: goroutine
- M: OS thread (machine)
- P: processor
.image scheduler-concepts.png 400 _

* Параллелизм в Golang это действительно эффективно
- Расход памяти: 240 *byte* (размер G struct) + 4kb(стек горутины)
- Быстрое переключение между горутинами (контекст отсутсвует)
- Вытесняющая многозадачность
- Сам планировщик [[https://github.com/golang/go/blob/master/src/runtime/runtime2.go]]

* Параллелизм в Golang и C#
.image go_vs_c_sharp.jpg 400 _ 
- [[https://medium.com/@alexyakunin/go-vs-c-part-1-goroutines-vs-async-await-ac909c651c11][Go vs C#, part 1: Goroutines vs Async-Await]]
- [[https://github.com/chrisdavies/Asynqueue/tree/master/go]]
- [[https://habr.com/ru/post/336000/]]
: https://nikgrozev.com/2015/07/14/overview-of-modern-concurrency-and-parallelism-concepts/

* Переход с C# на Go
.image sharp.jpeg
 
* Нужно быть евангелистом Go
.image lit_nicky.png 500 _
: главная сложность - убедить человека что в правильности того что ты предлагешь
: убедить что технологии не от MS также могут быть весьма интересными
: в общем нужно быть ЕВАНГЕЛИСТОМ 

* Что не очевидно для C# программиста
 - C# программист(да и не только C#) ожидает, что slice - это reference type
.code slice.go

* Slice изнутри
.code slice_internals.go
- slice это просто структура внутри которой спрятан указатель
- все структуры - это value type (в терминолигии C#)
.image boyarskii.jpg 
 
* Что насчет map[] ?
.code map_internals.go

* map[] - структура ????
.image map_meme.jpg 
: sizeof(hmap) = 28 bytes

* Скорее указатель на структуру
.code map_internals2.go
[[https://golang.org/src/runtime/map.go][https://golang.org/src/runtime/map.go]]
[[https://golang.org/src/runtime/map_fast32.go][https://golang.org/src/runtime/map_fast32.go]] 
[[https://golang.org/src/runtime/map_fast64.go][https://golang.org/src/runtime/map_fast64.go]] 

* Что насчет channel ?
.code channel.go
[[https://golang.org/src/runtime/chan.go][https://golang.org/src/runtime/chan.go]]

* Проблемы с подключаемся к MS SQL
**[[https://github.com/denisenkom/go-mssqldb]] 
- Написана на Go
- Не поддерживает возврат переменных табличного типа из хранимых процедур
- Возвращает только последнее исключение (если их было несколько предыдущие не возвращаются)

**[[https://github.com/minus5/gofreetds]]
-Требует FreeTDS библиотеку
-Падает, если входные параметры хранимой процедуры, имееют тип alias
.image This_is_Fine_Gopher.png 300 _
: Мы используем нативный драйвер. Для обоих перечисленных проблем можно сделать workaround

* gRPC C#
**[[https://github.com/grpc/grpc/tree/master/src/csharp]] 
- как-то работает
- написана явно не C# программистами 

* Что еще напрягает в Go 
.image golang_error_handling.png

* Чего не хватает в Go
.image golang_generics.jpg 600 _ 


* Чего не хватает в Go
- Нет тернарных операторов 
- Нет enum 
.image golang2.jpeg 500 _ 

* Ждем Golang 2.0
.image golang2.jpg 500 _  

